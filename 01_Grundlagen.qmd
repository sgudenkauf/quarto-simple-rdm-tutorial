
# Der Weg zur Datenveröffentlichung {#sec-foundations}

Dieses Dokument richtet sich an Sie als Forschende/r einer Einrichtung mit begrenzten Mitteln für Forschungsdatenmanagement. Es soll Ihnen helfen, dieses Vorhaben mit möglichst geringem persönlichen Aufwand umzusetzen (@tbl-gqm-rdm). 

| Aspekt | Beispiel |
|:-|:--|
| Zweck | Verringerung |
| Problem | des persönlichen Aufwands |
| Objekt oder Prozess | zum Management von Forschungsdaten |
| Sichtpunkt | aus der Sicht einzelner Forschende/r |

: Zieldefinition gem. *Goal Question Metric* (GQM) von @basili_goal_1994. {#tbl-gqm-rdm}

Bevor wir die einzelnen Schritte zur Veröffentlichung von Forschungsdaten durchgehen, benennen wir die grundlegenden Fragen:

1. Wo speichere ich meine Daten?
   

2. Wie verwalte ich neue Versionen meines Datensatzes?

3. Wie mache ich meinen Datensatz öffentlich und referenzierbar?

4. Wie beschreibe ich meinen Datensatz und dessen Metadaten sinnvoll?

5. Wie handhabe ich die FAIR-Prinzipien um?

Die Wahl der Werkzeuge beeinflusst sehr, wie aufwendig die Beantwortung dieser Fragen ist. Für diese Anleitung haben wir die Auswahl nach folgenden Kriterien getroffen:

1. So wenig Werkzeuge wie möglich

2. Robustheit und langfristige Verfügbarkeit

3. Hohe fachübergreifende Verbreitung

4. Keine zwingenden Abhängigkeiten von Verwaltungsstrukturen innerhalb der eigenen Einrichtung

@tbl-rdm-tools beschreibt die Werkzeuge, die wir zur Veröffentlichung von Forschungsdaten verwenden werden. Schauen Sie sich ruhig schon einmal an, bevor wir mit den weiteren Schritten fortfahren.

| Werkzeug | Beschreibung | Fragen |
|:--|:---|-:|
| [GitHub](https://github.com/) | Internetdienst zum kollaborativen Erstellen, Speichern, Verwalten und Teilen von Code. Basiert auf dem kostenlosen und quelloffenen verteilten Versionskontrollsystem [Git](https://git-scm.com/). Unterstützt die Versionierung mittels *Releases*.| 1, 2 |
| [Zenodo](https://zenodo.org/) | Offene europäische Plattform zur Veröffentlichung wissenschaftlicher Ergebnisse. Jede Einreichung erhält einen dauerhaften digitalen Objektbezeichner (DOI, siehe auch @noauthor_doi_2023). | 3 |
| [Markdown](https://www.markdownguide.org/basic-syntax/) | Stark vereinfachte Auszeichnungssprache für die Erstellung von formatierten Text. Kann leicht in verschiedene Zielformate übersetzt werden. |4, 5|

: Werkzeuge zur Veröffentlichung von Forschungsdaten. {#tbl-rdm-tools}

## Daten vorbereiten

1. **Bereiten Sie Ihre Daten auf:**
   
   - Verwenden Sie eine strukturierte, verständliche Dateibenennung. Es emfehlen sich die Best Practices der MIT Libraries, siehe @malinowski_file_2020. In @tbl-rdm-naming stellen wir Ihnen ausgewählte Empfehlungen vor.
   
   - Entfernen Sie sensible oder personenbezogene Daten.
   
   - Dokumentieren Sie Ihr Vorgehen zur Datenerhebung und -aufbereitung in einer separaten Datei, z. B. `README.md` oder `metadata.txt`.

2. **Erstellen Sie eine geeignete Ordnerstruktur:**
   
   - Erstellen Sie ein Hauptverzeichnis mit klar strukturierten Unterordnern, z. B. `/raw_data`, `/processed_data`, `/scripts`.

::: {.callout-note}
In @sec-appendix-readme finden Sie das Beispiel einer README-Datei in einfachem [Markdown](https://www.markdownguide.org/basic-syntax/)-Textormat. Es beinhaltet Textbausteine, die für die Ablage in einem GitHub-Repository geeignet sind.
:::

|Thema|Empfehlungen|
|:--|:---|
|Dateinamen| nicht mehr als 32 Zeichen|
|Trennzeichen| nur Unterstrich `_` und *camelCase* als Trenner, z. B. `Handout_dateiBenennung.pdf`|
||keine Leerzeichen|
||keine Punkte außer direkt vor der Dateiendung|
|Sonderzeichen|keine sonstigen Sonderzeichen wie z. B. `&`, `*`, `%`, `#`, `;`, `!`, `@`, `~`, ', `[`, `]`, `{`, `}`, `?`, `<`, `>`|
|Datumsangaben|möglichst konsistent, um das Suchen und Sortieren zu erleichtern|
||`YYYYMMDD` (Jahr, Monat, Tag) ist ein sehr gutes Format, z. B. `20240828_Protokoll.pdf`|
|Nummerierungen|**führende Nummern** zur Abbildung fester Sequenzen|
||Sequenzen von $1$ bis $10$: `01_`bis `10_`|
||Sequenzen von $1$ bis $100$:  `001_` bis `100_`|

: Ausgewählte Empfehlungen zur Dateibenennung. {#tbl-rdm-naming}


## GitHub-Repository einrichten

GitHub basiert auf dem kostenlosen und quelloffenen Versionskontrollsystem [Git](https://git-scm.com/). Grundsätzlich können Sie auf der Kommadozeile Ihres Computers mit Git-Befehlen arbeiten, um Ihren Datensatz in GitHub zu pflegen (z. B. `git init`, `git add`, `git commit`). Dasselbe können Sie aber auch mit der leicht zu bedienenden Desktop-Anwendung [GitHub Desktop](https://github.com/apps/desktop) erreichen.

Im Rahmen dieser Anleitung empfehlen und verwenden wir GitHub Desktop (@fig-github-desktop-overview). Einen guten Einstieg in die Arbeit mit GitHub Desktop finden Sie in der offiziellen [GitHub-Dokumentation](https://docs.github.com/de/desktop/overview/creating-your-first-repository-using-github-desktop).

![GitHub Desktop im Überblick.](img/github-desktop-overview.png){#fig-github-desktop-overview width=100%}

1. **GitHub-Konto erstellen:**
   
   - Registrieren Sie sich auf [GitHub](https://github.com/).
   
   - Nach der Registrierung können Sie sich auf GitHub anmelden.
   
   - Installieren Sie [GitHub Desktop](https://github.com/apps/desktop).

2. **Neues Repository erstellen:**
   
   - Melden Sie sich auf [GitHub](https://github.com/) an und erstellen Sie ein neues öffentliches Repository. 
   
   - Alternativ können Sie das Repository auch mit GitHub Desktop erstellen: ``File > New repository...`` (Menüleiste oben links in @fig-github-desktop-overview)
   
   - Benennen Sie das Repository sinnvoll und passend zu `README.md` (z. B. `projectname-dataset`).
   
   - Ist das Repository erstellt, gleicht GitHub Desktop das lokale Repository-Verzeichnis auf Ihrem Rechner mit dem öffentlichen Repository auf GitHub ab. Änderungen, die Sie am lokalen Ordner vornehmen, können hinzugefügt (`git add`), festgeschrieben (`git commit`) und anschließend in das öffentliche Repository übertragen werden (`git push`).

3. **Daten in das Repository übertragen:**
   
   - Legen Sie Ihre Daten und die README-Datei in das lokale Repository-Verzeichnis auf Ihrem Rechner.
   
   - Geben Sie Ihre Änderungen am lokalen Repository-Verzeichnis an das öffentlichen Repository auf GitHub weiter: `Commit to main` (unten links in @fig-github-desktop-overview), dann `Push origin` (erscheint nach dem *Commit* oben rechts statt `Fetch origin` in @fig-github-desktop-overview)
   
   - Arbeiten Sie mit mehreren Personen gemeinsam am Repository, sollten Sie vor jedem *Commit* zunächst den aktuellen Stand einholen und mit Ihren Änderungen vergleichen: `Fetch origin` (oben rechts in @fig-github-desktop-overview)


##  Zenodo mit GitHub verbinden

1. **Zenodo-Konto erstellen:**
   
   - Registrieren Sie sich auf [Zenodo.org](https://zenodo.org/). Nach der Registrierung können Sie sich z. B. mit Ihrer [ORCID ID](https://orcid.org/) anmelden.

2. **GitHub-Integration aktivieren:**
   
   - Gehen Sie nach der Anmeldung zu "*Settings*" und verbinden Sie Ihr GitHub-Konto mit Zenodo: `My account > GitHub` (@fig-zenodo-settings-github)
   
   - Wählen Sie das Repository aus, das mit Zenodo veröffentlicht werden soll.

   ![GitHub-Integration in Zenodo.](img/zenodo-settings-github.png){#fig-zenodo-settings-github width=100%}

## Daten auf Zenodo veröffentlichen

1. **GitHub-Release erstellen:**

   - Melden Sie sich auf der GitHub-Webseite an und öffnen Sie die Hauptseite Ihres Repositorys.^[GitHub Desktop unterstützt das Erstellen von Releases momentan nicht.]
   
   - Erstellen Sie ein Release im GitHub-Repository: `Releases > Draft a new release` (unten rechts in @fig-github-web-overview)

   ![Hauptseite eines Repositorys auf der GitHub Webseite.](img/github-web-overview.png){#fig-github-web-overview width=75%}
   
   - Geben Sie als *Tag* eine passende Versionsnummer (z. B. `v0.1.0`) und eine kurze Beschreibung für das Release an (@fig-github-web-release).

   ![Erstellen eines Release in einem GitHub-Repository.](img/github-web-release.png){#fig-github-web-release width=75%}

   - Eine detaillierte Anleitung zum Erstellen eines Releases finden Sie in der  [GitHub-Dokumentation](https://docs.github.com/de/repositories/releasing-projects-on-github/managing-releases-in-a-repository).

2. **Automatische Zenodo-DOI erstellen:**
   
   - Zenodo generiert automatisch einen DOI für das Release.
   
   - Fügen Sie den DOI zur README-Datei hinzu.

## Veröffentlichung bekannt machen
   
   - Verweisen Sie im Paper auf die DOI des Datensatzes.   
   - Teilen Sie den Zenodo-Link und den DOI mit Ihrem Netzwerk.
